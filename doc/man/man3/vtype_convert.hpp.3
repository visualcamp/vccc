.TH "type_support/include/vccc/type_support/vtype_convert.hpp" 3 "Fri Dec 18 2020" "VCCC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
type_support/include/vccc/type_support/vtype_convert.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <algorithm>\fP
.br
\fC#include 'vccc/type_support/convert_to\&.hpp'\fP
.br
\fC#include 'vccc/type_traits\&.hpp'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBvccc\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename NewType , template< typename, int\&.\&.\&. > class CVType, typename OldType , int \&.\&.\&. CVParams, VCCC_REQUIRE((!std::is_same< NewType, OldType >::value)) > decltype(auto) \fBvccc::vtype_convert\fP (const CVType< OldType, CVParams\&.\&.\&. > &cv_type)"
.br
.ti -1c
.RI "template<typename NewType , template< typename, int\&.\&.\&. > class CVType, int \&.\&.\&. CVParams> decltype(auto) \fBvccc::vtype_convert\fP (const CVType< NewType, CVParams\&.\&.\&. > &cv_type)"
.br
.ti -1c
.RI "template<typename NewType , template< typename, int\&.\&.\&. > class CVType, int \&.\&.\&. CVParams> decltype(auto) \fBvccc::vtype_convert\fP (CVType< NewType, CVParams\&.\&.\&. > &&cv_type)"
.br
.ti -1c
.RI "template<typename NewType , template< typename\&.\&.\&. > class Container, typename OldType , typename \&.\&.\&. Params, VCCC_REQUIRE((is_container_v< Container< OldType, Params\&.\&.\&. >>, !std::is_same< NewType, OldType >::value)) > decltype(auto) \fBvccc::vtype_convert\fP (const Container< OldType, Params\&.\&.\&. > &container)"
.br
.ti -1c
.RI "template<typename NewType , template< typename\&.\&.\&. > class Container, typename \&.\&.\&. Params, VCCC_REQUIRE((is_container_v< Container< NewType, Params\&.\&.\&. >>)) > decltype(auto) \fBvccc::vtype_convert\fP (const Container< NewType, Params\&.\&.\&. > &container)"
.br
.ti -1c
.RI "template<typename NewType , template< typename\&.\&.\&. > class Container, typename \&.\&.\&. Params, VCCC_REQUIRE((is_container_v< Container< NewType, Params\&.\&.\&. >>)) > decltype(auto) \fBvccc::vtype_convert\fP (Container< NewType, Params\&.\&.\&. > &&container)"
.br
.ti -1c
.RI "template<typename NewType , typename Func , template< typename\&.\&.\&. > class Container, typename OldType , typename \&.\&.\&. Params, VCCC_REQUIRE((is_container_v< Container< OldType, Params\&.\&.\&. >>, !std::is_same< NewType, OldType >::value)) > decltype(auto) \fBvccc::vtype_convert\fP (const Container< OldType, Params\&.\&.\&. > &container, Func func)"
.br
.ti -1c
.RI "template<typename NewType , template< typename\&.\&.\&. > class Container, typename \&.\&.\&. Params, typename UnaryOperation , VCCC_REQUIRE((is_container_v< Container< NewType, Params\&.\&.\&. >>)) > decltype(auto) \fBvccc::vtype_convert\fP (const Container< NewType, Params\&.\&.\&. > &container, UnaryOperation func)"
.br
.ti -1c
.RI "template<typename NewType , typename OldType , std::size_t n, VCCC_REQUIRE((!std::is_same< NewType, OldType >::value)) > constexpr decltype(auto) \fBvccc::vtype_convert\fP (const std::array< OldType, n > &container)"
.br
.ti -1c
.RI "template<typename NewType , std::size_t n> constexpr decltype(auto) \fBvccc::vtype_convert\fP (const std::array< NewType, n > &container)"
.br
.ti -1c
.RI "template<typename NewType , std::size_t n> constexpr decltype(auto) \fBvccc::vtype_convert\fP (std::array< NewType, n > &&container)"
.br
.ti -1c
.RI "template<typename NewType , typename OldType , std::size_t n, typename UnaryOperation , VCCC_REQUIRE((!std::is_same< NewType, OldType >::value)) > constexpr decltype(auto) \fBvccc::vtype_convert\fP (const std::array< OldType, n > &container, UnaryOperation func)"
.br
.ti -1c
.RI "template<typename NewType , std::size_t n, typename UnaryOperation > constexpr decltype(auto) \fBvccc::vtype_convert\fP (const std::array< NewType, n > &container, UnaryOperation func)"
.br
.ti -1c
.RI "template<typename NewType , std::size_t n, typename UnaryOperation > constexpr decltype(auto) \fBvccc::vtype_convert\fP (std::array< NewType, n > &&container, UnaryOperation func)"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for VCCC from the source code\&.
